name: Full Training, Artifact Commit, and Docker Deployment Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  train-build-deploy:
    name: Train, Commit, Build, and Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 360

    # Izin yang diperlukan untuk membuat Pull Request
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: 1. Checkout Repository
        uses: actions/checkout@v4

      - name: 2. Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: 3. Install Dependencies
        run: |
          echo "--- Installing Python packages ---"
          python -m pip install --upgrade pip
          pip install tensorflow numpy scikit-learn mlflow==2.22.1 dagshub

      - name: 4. Check Environment
        run: |
          echo "--- Environment Check ---"
          python --version
          pip list

      - name: 5. Run Training Script
        shell: bash
        # Memberikan kredensial langsung ke langkah ini menggunakan env var standar MLflow
        env:
          MLFLOW_TRACKING_URI: https://dagshub.com/macamtema/smsml_tema.mlflow
          MLFLOW_TRACKING_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
          MLFLOW_TRACKING_PASSWORD: ${{ secrets.DAGSHUB_TOKEN }}
          TF_CPP_MIN_LOG_LEVEL: "2" # Menyembunyikan warning TensorFlow
        run: |
          cd MLProject
          python modelling.py --epochs 2

      - name: 6. Get Trained Model's Run ID
        id: get_run_id
        shell: bash
        run: |
          # Membaca run_id dari file yang dibuat oleh skrip modelling.py
          RUN_ID_FILE="MLProject/run_id.txt"
          if [ ! -f "$RUN_ID_FILE" ]; then echo "❌ File run_id.txt not found!"; exit 1; fi
          RUN_ID=$(cat $RUN_ID_FILE)
          echo "✅ Trained Model Run ID: $RUN_ID"
          echo "RUN_ID=$RUN_ID" >> $GITHUB_ENV

      - name: 7. Download All Artifacts from MLflow
        shell: bash
        # Memberikan kredensial ke perintah mlflow secara langsung
        env:
          MLFLOW_TRACKING_URI: https://dagshub.com/macamtema/smsml_tema.mlflow
          MLFLOW_TRACKING_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
          MLFLOW_TRACKING_PASSWORD: ${{ secrets.DAGSHUB_TOKEN }}
        run: |
          mlflow artifacts download --run-id ${{ env.RUN_ID }} -d ./artifacts_temp
          echo "✅ Artifacts downloaded. Contents:"
          ls -R ./artifacts_temp

      - name: 8a. Prepare Artifact for Commit to Repository
        run: |
          echo "Preparing artifact folder for commit..."
          rm -rf MLProject/model_artifact/
          mkdir -p MLProject/model_artifact/
          cp -r artifacts_temp/model/* MLProject/model_artifact/

      - name: 8b. Create Pull Request with Model Artifact
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.PAT }}
          commit-message: "ci: Update trained model artifact"
          author: "github-actions[bot] <github-actions[bot]@users.noreply.github.com>"
          branch: "update/latest-model-artifact"
          base: main
          title: "[Automated] Update Trained Model Artifact"
          body: |
            A new version of the model has been trained. This PR places the new artifact into the `MLProject/model_artifact` folder.
            - **MLflow Run ID:** `${{ env.RUN_ID }}`
          add-paths: MLProject/model_artifact/

      - name: 9. Build Docker Image
        run: |
          echo "Preparing files for Docker build..."
          mkdir -p environment_files/environment
          mkdir -p downloaded_model
          # Menggunakan conda.yaml dari artefak yang diunduh (hasil autolog)
          cp artifacts_temp/conda.yaml environment_files/environment/conda.yaml
          cp -r artifacts_temp/model/* downloaded_model/model/

          echo "Building Docker image..."
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/smsml-model:latest -f Dockerfile .

      - name: 10. Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 11. Push Docker Image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/smsml-model:latest

      - name: 12. Complete job
        run: echo "Workflow completed successfully."
